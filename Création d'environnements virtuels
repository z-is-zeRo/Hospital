Le module venv permet de créer des "environnements virtuels" légers avec leurs propres dossiers site, optionnellement isolés des dossiers site système. Chaque environnement virtuel a son propre binaire Python (qui correspond à la version du binaire qui a été utilisée pour créer cet environnement) et peut avoir sa propre liste de paquets Python installés dans ses propres dossiers site.

Voir la PEP 405 pour plus d'informations à propos des environnements virtuels Python.

Voir aussi: Python Packaging User Guide: Creating and using virtual environments

Python Packaging User Guide: Creating and using virtual environments 

# Création d'environnements virtuels

La création d'environnements virtuels est faite en exécutant la commande venv :

    python3 -m venv /path/to/new/virtual/environment

Lancer cette commande crée le dossier cible (en créant tous les dossiers parents qui n'existent pas déjà) et y ajoute un fichier pyvenv.cfg contenant une variable home qui pointe sur l'installation Python depuis laquelle cette commande a été lancée (un nom habituel pour ce dossier cible est .venv). Cela crée également un sous-dossier bin (ou Scripts sous Windows) contenant une copie (ou un lien symbolique) du ou des binaires python (dépend de la plateforme et des paramètres donnés à la création de l'environnement). Elle crée aussi un sous-dossier (initialement vide) lib/pythonX.Y/site-packages (Sous Windows, c'est Lib\site-packages). Si un dossier existant est spécifié, il sera réutilisé.

Obsolète depuis la version 3.6: pyvenv était l'outil recommandé pour créer des environnements sous Python 3.3 et 3.4, et est obsolète depuis Python 3.6.

Modifié dans la version 3.5: L'utilisation de venv est maintenant recommandée pour créer vos environnements virtuels.

Sur Windows, appelez la commande venv comme suit :

    c:\>c:\Python35\python -m venv c:\path\to\myenv

Alternativement, si vous avez configuré les variables PATH et PATHEXT pour votre installation Python :

    c:\>python -m venv c:\path\to\myenv

La commande, si lancée avec -h, montrera les options disponibles :

usage: venv [-h] [--system-site-packages] [--symlinks | --copies] [--clear]
            [--upgrade] [--without-pip] [--prompt PROMPT] [--upgrade-deps]
            ENV_DIR [ENV_DIR ...]

Creates virtual Python environments in one or more target directories.

positional arguments:
  ENV_DIR               A directory to create the environment in.

optional arguments:
  -h, --help            show this help message and exit
  --system-site-packages
                        Give the virtual environment access to the system
                        site-packages dir.
  --symlinks            Try to use symlinks rather than copies, when symlinks
                        are not the default for the platform.
  --copies              Try to use copies rather than symlinks, even when
                        symlinks are the default for the platform.
  --clear               Delete the contents of the environment directory if it
                        already exists, before environment creation.
  --upgrade             Upgrade the environment directory to use this version
                        of Python, assuming Python has been upgraded in-place.
  --without-pip         Skips installing or upgrading pip in the virtual
                        environment (pip is bootstrapped by default)
  --prompt PROMPT       Provides an alternative prompt prefix for this
                        environment.
  --upgrade-deps        Upgrade core dependencies: pip setuptools to the
                        latest version in PyPI

Once an environment has been created, you may wish to activate it, e.g. by
sourcing an activate script in its bin directory.



Modifié dans la version 3.9: Add --upgrade-deps option to upgrade pip + setuptools to the latest on PyPI

Modifié dans la version 3.4: Installe pip par défaut, ajout des options --without-pip et --copies

Modifié dans la version 3.4: Dans les versions précédentes, si le dossier de destination existait déjà, une erreur était levée, sauf si l'option --clear ou --upgrade était incluse.

Note

Bien que les liens symboliques soient pris en charge sous Windows, ils ne sont pas recommandés. Il est particulièrement à noter que le double-clic sur python.exe dans l'Explorateur de fichiers suivra le lien symbolique et ignorera l'environnement virtuel.

Note

On Microsoft Windows, it may be required to enable the Activate.ps1 script by setting the execution policy for the user. You can do this by issuing the following PowerShell command:

PS C:> Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser

See About Execution Policies for more information.

Le fichier crée pyvenv.cfg inclus aussi la clé include-system-site-packages, dont la valeur est true si venv est lancé avec l'option --system-site-packages, sinon sa valeur est false.

Sauf si l'option --without-pip est incluse, ensurepip sera invoqué pour amorcer pip dans l'environnement virtuel.

Plusieurs chemins peuvent être donnés à venv, et dans ce cas un environnement virtuel sera créé, en fonction des options incluses, à chaque chemin donné.

Une fois qu'un environnement virtuel est créé, il peut être "activé" en utilisant un script dans le dossier binaire de l'environnement virtuel. L'invocation de ce script est spécifique à chaque plateforme (<venv> doit être remplacé par le chemin d'accès du répertoire contenant l'environnement virtuel) :

Plateforme
	

Invite de commande
	

Commande pour activer l'environnement virtuel

POSIX:
 bash/zsh
  $ source <venv>/bin/activate
 fish
  $ source <venv>/bin/activate.fish 
csh/tcsh
  $ source <venv>/bin/activate.csh
PowerShell Core
  $ <venv>/bin/Activate.ps1
  
Windows:
cmd.exe
  C:\\{venv}\\Scripts\\activate.bat
 PowerShell
  PS C:\\> <venv>\\Scripts\\Activate.ps1

Vous ne devez pas spécialement activer un environnement ; l'activation ajoute juste le chemin du dossier de binaires de votre environnement virtuel à votre PATH, pour que "python" invoque l’interpréteur Python de l'environnement virtuel et que vous puissiez lancer des scripts installés sans avoir à utiliser leur chemin complet. Cependant, tous les scripts installés dans un environnement virtuel devraient être exécutables sans l'activer, et se lancer avec l'environnement virtuel Python automatiquement.
Vous pouvez désactiver un environnement virtuel en écrivant « deactivate » dans votre shell. Le mécanisme exact est spécifique à la plate-forme et est un détail d'implémentation interne (généralement un script ou une fonction shell sera utilisé).
Nouveau dans la version 3.4: Les scripts d'activation pour fish et csh.
Nouveau dans la version 3.8: Scripts d'activation PowerShell installés sous POSIX pour le support de PowerShell Core.



Note:
Un environnement virtuel est un environnement Python tel que l'interpréteur Python, les bibliothèques et les scripts installés sont isolés de ceux installés dans d'autres environnements virtuels, et (par défaut) de toutes autres bibliothèques installées dans un Python "système", par exemple celui qui est installé avec votre système d'exploitation.
Un environnement virtuel est une arborescence de dossiers qui contiens les fichiers exécutables Python et autres fichiers qui indiquent que c'est un environnement virtuel.
Les outils d'installations communs comme setuptools et pip fonctionnent comme prévu avec des environnements virtuels. En d'autres termes, quand un environnement virtuel est actif, ils installent les paquets Python dans l'environnement virtuel sans avoir besoin de leur préciser explicitement.
Quand un environnement virtuel est actif (Par exemple quand l’interpréteur Python de l'environnement virtuel est lancé), les attributs sys.prefix et sys.exec_prefix pointent vers le dossier racine de l'environnement virtuel, alors que sys.base_prefix et sys.base_exec_prefix pointent vers l'installation de Python qui n'est pas celle de l'environnement virtuel et qui a été utilisée pour créer l'environnement virtuel. Si un environnement virtuel n'est pas actif, alors sys.prefix est égal à sys.base_prefix et sys.exec_prefix est égal à sys.base_exec_prefix (ils pointent tous sur une installation Python qui n'est pas un environnement virtuel).
Quand un environnement virtuel est actif, toute option qui change le chemin d'installation sera ignoré de tous les fichiers de configuration distutils pour éviter que des projets soient accidentellement installés en dehors de l'environnement virtuel.
Quand vous travaillez dans une invite de commande shell, les utilisateurs peuvent activer un environnement virtuel en lançant un script activate situé dans le dossier des exécutables de l'environnement virtuel (le nom de fichier précis dépends du shell utilisé), ce qui ajoute le dossier des exécutables de l'environnement virtuel dans la variable d'environnement PATH. Il ne devrait jamais y avoir besoin dans d'autre circonstances d'activer un environnement virtuel. Des scripts installés dans un environnement virtuel ont un « shebang » qui pointe vers l’interpréteur Python de l'environnement virtuel. Cela veux dire que le script sera lancé avec cet interpréteur peut importe la valeur de PATH. Sur Windows, le « shebang » est interprété si vous avez le Lanceur Python pour Windows installé (Cela a été ajouté à Python 3.3 -- Voir PEP 397 pour plus de détails). De ce fait, double cliquer un script installé dans une fenêtre de l'Explorateur Windows devrait lancer le script avec le bon interpréteur sans avoir besoin de référencer son environnement virtuel dans PATH.

API

La méthode haut niveau décrite au dessus utilise une API simple qui permet à des créateurs d'environnements virtuels externes de personnaliser la création d'environnements virtuels basés sur leurs besoins, la classe EnvBuilder.

class venv.EnvBuilder(system_site_packages=False, clear=False, symlinks=False, upgrade=False, with_pip=False, prompt=None, upgrade_deps=False)

    La classe EnvBuilder accepte les arguments suivants lors de l'instanciation :

        system_site_packages -- Une valeur booléenne qui indique que les site-packages du système Python devraient être disponibles dans l'environnement virtuel (par défaut à False).

        clear -- Une valeur booléenne qui, si vraie, supprimera le contenu de n'importe quel dossier existant cible, avant de créer l'environnement.

        symlinks -- Une valeur booléenne qui indique si il faut créer un lien symbolique sur le binaire Python au lieu de le copier.

        upgrade -- Une valeur booléenne qui, si vraie, mettra à jour un environnement existant avec le Python lancé -- utilisé quand Python à été mis a jour sur place (par défaut à False).

        with_pip -- Une valeur booléenne qui, si vraie, assure que pip est installé dans l'environnement virtuel. Cela utilise ensurepip avec l'option --default-pip.

        prompt -- a String to be used after virtual environment is activated (defaults to None which means directory name of the environment would be used). If the special string "." is provided, the basename of the current directory is used as the prompt.

        upgrade_deps -- Update the base venv modules to the latest on PyPI

    Modifié dans la version 3.4: Ajout du paramètre with_pip

    Nouveau dans la version 3.6: Ajout du paramètre prompt

    Nouveau dans la version 3.9: Added the upgrade_deps parameter

    Les créateurs d'outils externes de gestion d'environnements virtuels sont libres d'utiliser la classe EnvBuilder mise à disposition en tant que classe de base.

    Le env-builder retourné est un objet qui a une méthode, create :

    create(env_dir)

        Crée un environnement virtuel en spécifiant le chemin cible (absolu ou relatif par rapport au dossier courant) qui contiendra l'environnement virtuel. La méthode create crée l'environnement dans le dossier spécifié ou lève une exception appropriée.

        La méthode create de la classe EnvBuilder illustre les points d'entrées disponibles pour la personnalisation de sous-classes :

        def create(self, env_dir):
            """
            Create a virtualized Python environment in a directory.
            env_dir is the target directory to create an environment in.
            """
            env_dir = os.path.abspath(env_dir)
            context = self.ensure_directories(env_dir)
            self.create_configuration(context)
            self.setup_python(context)
            self.setup_scripts(context)
            self.post_setup(context)

        Chacune des méthodes ensure_directories(), create_configuration(), setup_python(), setup_scripts() et post_setup() peuvent être écrasés.

    ensure_directories(env_dir)

        Crée un dossier d'environnement et tous les dossiers nécessaires, et retourne un objet contexte. C'est juste un conteneur pour des attributs (comme des chemins), qui sera utilisé par d'autres méthodes. Ces dossiers peuvent déjà exister. tant que clear ou upgrade ont été spécifiés pour permettre de telles opérations dans un dossier d'environnement existant.

    create_configuration(context)

        Crée le fichier de configuration pyvenv.cfg dans l'environnement.

    setup_python(context)

        Crée une copie ou un lien symbolique vers l'exécutable Python dans l'environnement. Sur les systèmes POSIX, si un exécutable spécifique python3.x a été utilisé, des liens symboliques vers python et python3 seront créés pointant vers cet exécutable, sauf si des fichiers avec ces noms existent déjà.

    setup_scripts(context)

        Installe les scripts d'activation appropriés à la plateforme dans l'environnement virtuel.

    upgrade_dependencies(context)

        Upgrades the core venv dependency packages (currently pip and setuptools) in the environment. This is done by shelling out to the pip executable in the environment.

        Nouveau dans la version 3.9.

    post_setup(context)

        Une méthode qui n'est la que pour se faire surcharger dans des implémentation externes pour pré installer des paquets dans l'environnement virtuel ou pour exécuter des étapes post-création.

    Modifié dans la version 3.7.2: Windows utilise maintenant des scripts de redirection pour python[w].exe au lieu de copier les fichiers binaires. En 3.7.2 seulement setup_python() ne fait rien sauf s'il s'exécute à partir d'un build dans l'arborescence source.

    Modifié dans la version 3.7.3: Windows copie les scripts de redirection dans le cadre de setup_python() au lieu de setup_scripts(). Ce n'était pas le cas en 3.7.2. Lorsque vous utilisez des liens symboliques, les exécutables originaux seront liés.

    De plus, EnvBuilder propose cette méthode utilitaire qui peut être appelée de setup_scripts() ou post_setup() dans des sous classes pour assister dans l'installation de scripts customs dans l'environnement virtuel.

    install_scripts(context, path)

        path corresponds au chemin vers le dossier qui contiens les sous dossiers "common", "posix", "nt", chacun contenant des scripts destinés pour le dossier "bin" dans l'environnement. Le contenu du dossier "common" et le dossier correspondant à os.name sont copiés après quelque remplacement de texte temporaires :

            __VENV_DIR__ est remplacé avec le chemin absolu du dossier de l'environnement.

            __VENV_NAME__ est remplacé avec le nom de l'environnement (le dernier segment du chemin vers le dossier de l'environnement).

            __VENV_PROMPT__ est remplacé par le prompt (nom de l'environnement entouré de parenthèses et avec un espace le suivant).

            __VENV_BIN_NAME__ est remplacé par le nom du dossier bin (soit bin soit Scripts).

            __VENV_PYTHON__ est remplacé avec le chemin absolu de l’exécutable de l'environnement.

        Les dossiers peuvent exister (pour quand un environnement existant est mis à jour).

Il y a aussi une fonction pratique au niveau du module :

venv.create(env_dir, system_site_packages=False, clear=False, symlinks=False, with_pip=False, prompt=None, upgrade_deps=False)

    Crée une EnvBuilder avec les arguments donnés, et appelle sa méthode create() avec l'argument env_dir.

    Nouveau dans la version 3.3.

    Modifié dans la version 3.4: Ajout du paramètre with_pip

    Modifié dans la version 3.6: Ajout du paramètre prompt

    Modifié dans la version 3.9: Added the upgrade_deps parameter

Un exemple d'extension de EnvBuilder

Le script qui suis montre comment étendre EnvBuilder en implémentant une sous-classe qui installe setuptools et pip dans un environnement créé :

import os
import os.path
from subprocess import Popen, PIPE
import sys
from threading import Thread
from urllib.parse import urlparse
from urllib.request import urlretrieve
import venv

class ExtendedEnvBuilder(venv.EnvBuilder):
    """
    This builder installs setuptools and pip so that you can pip or
    easy_install other packages into the created virtual environment.

    :param nodist: If true, setuptools and pip are not installed into the
                   created virtual environment.
    :param nopip: If true, pip is not installed into the created
                  virtual environment.
    :param progress: If setuptools or pip are installed, the progress of the
                     installation can be monitored by passing a progress
                     callable. If specified, it is called with two
                     arguments: a string indicating some progress, and a
                     context indicating where the string is coming from.
                     The context argument can have one of three values:
                     'main', indicating that it is called from virtualize()
                     itself, and 'stdout' and 'stderr', which are obtained
                     by reading lines from the output streams of a subprocess
                     which is used to install the app.

                     If a callable is not specified, default progress
                     information is output to sys.stderr.
    """

    def __init__(self, *args, **kwargs):
        self.nodist = kwargs.pop('nodist', False)
        self.nopip = kwargs.pop('nopip', False)
        self.progress = kwargs.pop('progress', None)
        self.verbose = kwargs.pop('verbose', False)
        super().__init__(*args, **kwargs)

    def post_setup(self, context):
        """
        Set up any packages which need to be pre-installed into the
        virtual environment being created.

        :param context: The information for the virtual environment
                        creation request being processed.
        """
        os.environ['VIRTUAL_ENV'] = context.env_dir
        if not self.nodist:
            self.install_setuptools(context)
        # Can't install pip without setuptools
        if not self.nopip and not self.nodist:
            self.install_pip(context)

    def reader(self, stream, context):
        """
        Read lines from a subprocess' output stream and either pass to a progress
        callable (if specified) or write progress information to sys.stderr.
        """
        progress = self.progress
        while True:
            s = stream.readline()
            if not s:
                break
            if progress is not None:
                progress(s, context)
            else:
                if not self.verbose:
                    sys.stderr.write('.')
                else:
                    sys.stderr.write(s.decode('utf-8'))
                sys.stderr.flush()
        stream.close()

    def install_script(self, context, name, url):
        _, _, path, _, _, _ = urlparse(url)
        fn = os.path.split(path)[-1]
        binpath = context.bin_path
        distpath = os.path.join(binpath, fn)
        # Download script into the virtual environment's binaries folder
        urlretrieve(url, distpath)
        progress = self.progress
        if self.verbose:
            term = '\n'
        else:
            term = ''
        if progress is not None:
            progress('Installing %s ...%s' % (name, term), 'main')
        else:
            sys.stderr.write('Installing %s ...%s' % (name, term))
            sys.stderr.flush()
        # Install in the virtual environment
        args = [context.env_exe, fn]
        p = Popen(args, stdout=PIPE, stderr=PIPE, cwd=binpath)
        t1 = Thread(target=self.reader, args=(p.stdout, 'stdout'))
        t1.start()
        t2 = Thread(target=self.reader, args=(p.stderr, 'stderr'))
        t2.start()
        p.wait()
        t1.join()
        t2.join()
        if progress is not None:
            progress('done.', 'main')
        else:
            sys.stderr.write('done.\n')
        # Clean up - no longer needed
        os.unlink(distpath)

    def install_setuptools(self, context):
        """
        Install setuptools in the virtual environment.

        :param context: The information for the virtual environment
                        creation request being processed.
        """
        url = 'https://bitbucket.org/pypa/setuptools/downloads/ez_setup.py'
        self.install_script(context, 'setuptools', url)
        # clear up the setuptools archive which gets downloaded
        pred = lambda o: o.startswith('setuptools-') and o.endswith('.tar.gz')
        files = filter(pred, os.listdir(context.bin_path))
        for f in files:
            f = os.path.join(context.bin_path, f)
            os.unlink(f)

    def install_pip(self, context):
        """
        Install pip in the virtual environment.

        :param context: The information for the virtual environment
                        creation request being processed.
        """
        url = 'https://bootstrap.pypa.io/get-pip.py'
        self.install_script(context, 'pip', url)

def main(args=None):
    compatible = True
    if sys.version_info < (3, 3):
        compatible = False
    elif not hasattr(sys, 'base_prefix'):
        compatible = False
    if not compatible:
        raise ValueError('This script is only for use with '
                         'Python 3.3 or later')
    else:
        import argparse

        parser = argparse.ArgumentParser(prog=__name__,
                                         description='Creates virtual Python '
                                                     'environments in one or '
                                                     'more target '
                                                     'directories.')
        parser.add_argument('dirs', metavar='ENV_DIR', nargs='+',
                            help='A directory in which to create the '
                                 'virtual environment.')
        parser.add_argument('--no-setuptools', default=False,
                            action='store_true', dest='nodist',
                            help="Don't install setuptools or pip in the "
                                 "virtual environment.")
        parser.add_argument('--no-pip', default=False,
                            action='store_true', dest='nopip',
                            help="Don't install pip in the virtual "
                                 "environment.")
        parser.add_argument('--system-site-packages', default=False,
                            action='store_true', dest='system_site',
                            help='Give the virtual environment access to the '
                                 'system site-packages dir.')
        if os.name == 'nt':
            use_symlinks = False
        else:
            use_symlinks = True
        parser.add_argument('--symlinks', default=use_symlinks,
                            action='store_true', dest='symlinks',
                            help='Try to use symlinks rather than copies, '
                                 'when symlinks are not the default for '
                                 'the platform.')
        parser.add_argument('--clear', default=False, action='store_true',
                            dest='clear', help='Delete the contents of the '
                                               'virtual environment '
                                               'directory if it already '
                                               'exists, before virtual '
                                               'environment creation.')
        parser.add_argument('--upgrade', default=False, action='store_true',
                            dest='upgrade', help='Upgrade the virtual '
                                                 'environment directory to '
                                                 'use this version of '
                                                 'Python, assuming Python '
                                                 'has been upgraded '
                                                 'in-place.')
        parser.add_argument('--verbose', default=False, action='store_true',
                            dest='verbose', help='Display the output '
                                               'from the scripts which '
                                               'install setuptools and pip.')
        options = parser.parse_args(args)
        if options.upgrade and options.clear:
            raise ValueError('you cannot supply --upgrade and --clear together.')
        builder = ExtendedEnvBuilder(system_site_packages=options.system_site,
                                       clear=options.clear,
                                       symlinks=options.symlinks,
                                       upgrade=options.upgrade,
                                       nodist=options.nodist,
                                       nopip=options.nopip,
                                       verbose=options.verbose)
        for d in options.dirs:
            builder.create(d)

if __name__ == '__main__':
    rc = 1
    try:
        main()
        rc = 0
    except Exception as e:
        print('Error: %s' % e, file=sys.stderr)
    sys.exit(rc)

Ce script est aussi disponible au téléchargement en ligne.
    
